{"version":3,"sources":["Nav.js","About.js","Fortnite.js","ItemsDetail.js","App.js","serviceWorker.js","index.js"],"names":["Nav","style","color","to","className","About","listStyle","Fortnite","useEffect","fetchItems","useState","items","setItems","a","fetch","data","json","map","item","key","itemid","name","Item","match","fetchItem","images","setItem","params","id","src","transparent","alt","Home","App","path","exact","component","ItemsDetail","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kQA0BeA,EAvBH,WAER,IAAMC,EAAM,CACRC,MAAQ,SAGd,OACE,6BACI,kBAAC,IAAD,CAAMC,GAAG,IAAKF,MAAOA,GACrB,qCAEA,wBAAIG,UAAU,aACV,kBAAC,IAAD,CAAMD,GAAG,SAAUF,MAAOA,GAC1B,sCAEA,kBAAC,IAAD,CAAME,GAAG,YAAYF,MAAOA,GAC5B,4CCMGI,EAtBD,WAMZ,OACE,6BACE,kDACA,sEACE,iHACF,wBAAIJ,MATM,CACRK,UAAY,SASV,iFACA,mEACA,+EACF,0FACE,0D,gCCcKC,EA7BE,WAIfC,qBAAU,WACNC,MACF,IANmB,MAQKC,mBAAS,IARd,mBAQdC,EARc,KAQPC,EARO,KAUfH,EAAU,uCAAG,8BAAAI,EAAA,sEACIC,MAAM,uDADV,cACTC,EADS,gBAEKA,EAAKC,OAFV,OAETL,EAFS,OAIfC,EAASD,EAAMA,OAJA,2CAAH,qDAQhB,OACE,6BACEA,EAAMM,KAAI,SAAAC,GAAI,OACX,wBAAIC,IAAKD,EAAKE,QACV,kBAAC,IAAD,CAAOjB,GAAE,oBAAee,EAAKE,SAAWF,EAAKG,YCI3CC,EA5BF,SAAC,GAAa,IAAZC,EAAW,EAAXA,MAGbf,qBAAU,WACRgB,MAEA,IANsB,MAQAd,mBAAS,CAC/Be,OAAQ,KATc,mBAQjBP,EARiB,KAQXQ,EARW,KAYlBF,EAAS,uCAAG,8BAAAX,EAAA,sEACSC,MAAM,sDAAD,OAAuDS,EAAMI,OAAOC,KADlF,cACTJ,EADS,gBAEIA,EAAUR,OAFd,OAETE,EAFS,OAGfQ,EAAQR,GAHO,2CAAH,qDAQf,OACE,6BACC,4BAAKA,EAAKG,MACV,yBAAKQ,IAAKX,EAAKO,OAAOK,YAAaC,IAAKb,EAAKG,S,OCA5CW,EAAO,WACX,OACE,6BACE,iDACA,kFAKSC,EAzBH,WACV,OACE,kBAAC,IAAD,KACA,yBAAK7B,UAAU,OACd,kBAAC,EAAD,MACA,kBAAC,IAAD,KACA,kBAAC,IAAD,CAAO8B,KAAK,IAAIC,OAAK,EAACC,UAAWJ,IACjC,kBAAC,IAAD,CAAOE,KAAK,SAASE,UAAW/B,IAChC,kBAAC,IAAD,CAAO6B,KAAK,YAAYC,OAAK,EAACC,UAAW7B,IACzC,kBAAC,IAAD,CAAO2B,KAAK,gBAAgBE,UAAWC,QCNxBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASlB,MACvB,2DCZNmB,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.8ea5726c.chunk.js","sourcesContent":["import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\n\r\nconst Nav = () => {\r\n\r\n    const style={\r\n        color : 'white'\r\n    }\r\n\r\n  return (\r\n    <nav>\r\n        <Link to='/'  style={style}>\r\n        <h3>Logo</h3>\r\n        </Link>\r\n        <ul className=\"nav-links\">\r\n            <Link to='/about'  style={style}>\r\n            <li>About</li>\r\n            </Link>\r\n            <Link to='/fortnite' style={style}>\r\n            <li>Fortnite</li>\r\n            </Link>\r\n        </ul>\r\n    </nav>\r\n  );\r\n}\r\n\r\nexport default Nav;","import React from 'react';\r\n\r\n\r\nconst About = () => {\r\n\r\n    const style={\r\n        listStyle : 'none'\r\n    }\r\n\r\n  return (\r\n    <div>\r\n      <h1>This is About Page</h1>\r\n      <p>This app is create using React Router. </p>\r\n        <p> React Router can be used to add the component as a page without using anchor tag.</p>\r\n      <ul style={style}>\r\n          <li>BrowserRouter -  to add the router functionality.</li>\r\n          <li>Route -  redirect to the component.</li>\r\n          <li>Switch - returns only one first matching route.</li>\r\n        <li>\"exact\" - returns any number of routes that match exactly.</li>\r\n          <li>Link -  to create link.</li>\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default About;","import React,{ useState, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\nconst Fortnite = () => {\r\n\r\n  \r\n\r\n  useEffect(() => {\r\n      fetchItems();\r\n  },[]);\r\n\r\n  const [items, setItems] = useState([]);\r\n\r\n  const fetchItems = async () => {\r\n      const data = await fetch('https://fortnite-api.theapinetwork.com/upcoming/get');\r\n      const items = await data.json();\r\n      \r\n      setItems(items.items);\r\n  }\r\n     \r\n\r\n  return (\r\n    <div>\r\n     {items.map(item =>(\r\n         <h1 key={item.itemid}>\r\n             <Link  to={`/fortnite/${item.itemid}`}>{item.name}</Link>\r\n             </h1>\r\n     ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Fortnite;","import React,{ useState, useEffect } from 'react';\r\n\r\nconst Item = ({match}) => {\r\n\r\n \r\n  useEffect(() => {\r\n    fetchItem();\r\n  \r\n  },[])\r\n\r\n  const [item, setItem] = useState({\r\n    images: {}\r\n  });\r\n\r\n  const fetchItem = async () => {\r\n     const fetchItem = await fetch(`https://fortnite-api.theapinetwork.com/item/get?id=${match.params.id}`);\r\n     const item = await fetchItem.json();\r\n     setItem(item);\r\n     \r\n  }\r\n     \r\n\r\n  return (\r\n    <div>\r\n     <h1>{item.name}</h1>\r\n     <img src={item.images.transparent} alt={item.name} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Item;","import React from 'react';\nimport './App.css';\nimport Nav from './Nav';\nimport About from './About';\nimport Fortnite from './Fortnite';\nimport ItemsDetail from './ItemsDetail';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\n\n\nconst App = () => {\n  return (\n    <Router>\n    <div className=\"App\">\n     <Nav />\n     <Switch>\n     <Route path=\"/\" exact component={Home} />\n     <Route path=\"/about\" component={About} />\n     <Route path=\"/fortnite\" exact component={Fortnite} />\n     <Route path='/fortnite/:id' component={ItemsDetail} />\n     </Switch>\n    </div>\n    </Router>\n  );\n}\n\nconst Home = () => {\n  return(\n    <div>\n      <h1>This is Home Page</h1>\n      <p>To view Fortnite Character click Fortnite at top.</p>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}